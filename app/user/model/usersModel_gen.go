// Code generated by goctl. DO NOT EDIT.
package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`deleted_at`", "`login_in_time`", "`login_out_time`", "`heartbeat_time`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUsercenterUsersIdPrefix       = "cache:usercenter:users:id:"
	cacheUsercenterUsersUsernamePrefix = "cache:usercenter:users:username:"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindOneByUsername(ctx context.Context, username string) (*Users, error)
		FindOneByPhone(ctx context.Context, phone string) (*Users, error)
		FindOneByEmail(ctx context.Context, phone string) (*Users, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, id int64) error
		FuzzyFindByUsername(ctx context.Context, partUsername string) ([]*Users, error)
		FuzzyFindByPhone(ctx context.Context, partPhone string) ([]*Users, error)
		FuzzyFindByEmail(ctx context.Context, partEmail string) ([]*Users, error)
		// transaction submit
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
	}

	defaultUsersModel struct {
		sqlc.CachedConn
		table string
	}

	Users struct {
		Id            int64          `db:"id"`
		Username      string `db:"username"`
		Password      string `db:"password"`
		Email         string `db:"email"`
		Phone         string `db:"phone"`
		Status        int64          `db:"status"`
		Sex           int64          `db:"sex"`
		Addr          string `db:"addr"`
		Desc          string `db:"desc"`
		Avatar        string `db:"avatar"`
		LoginInTime   sql.NullTime   `db:"login_in_time"`
		LoginOutTime  sql.NullTime   `db:"login_out_time"`
		HeartbeatTime sql.NullTime   `db:"heartbeat_time"`
		CreatedAt     time.Time      `db:"created_at"`
		UpdatedAt     time.Time      `db:"updated_at"`
		DeletedAt     sql.NullTime   `db:"deleted_at"`
	}
)

var _ usersModel = (*defaultUsersModel)(nil)

func newUsersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUsersModel {
	return &defaultUsersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`users`",
	}
}

// 注意这里的返回值不能是*[]Users
func (m *defaultUsersModel) FuzzyFindByUsername(ctx context.Context, partUsername string) ([]*Users, error) {
	var resp []*Users
	partUsername = fmt.Sprintf("%%%s%%", partUsername)
	query := fmt.Sprintf("select %s from %s where username like ? and deleted_at is null", usersRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, partUsername)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FuzzyFindByPhone(ctx context.Context, partPhone string) ([]*Users, error) {
	var resp []*Users
	partPhone = fmt.Sprintf("%%%s%%", partPhone)
	query := fmt.Sprintf("select %s from %s where phone like ? and deleted_at is null", usersRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, partPhone)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
	
}

func (m *defaultUsersModel) FuzzyFindByEmail(ctx context.Context, partEmail string) ([]*Users, error){
	partEmail = strings.Split(partEmail, "@")[0]
	var resp []*Users
	partEmail = fmt.Sprintf("%%%s%%", partEmail)
	query := fmt.Sprintf("select %s from %s where email like ? and deleted_at is null", usersRows, m.table)
	// pay attention to rows!!!
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, partEmail)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}
	usercenterUsersIdKey := fmt.Sprintf("%s%v", cacheUsercenterUsersIdPrefix, id)
	usercenterUsersUsernameKey := fmt.Sprintf("%s%v", cacheUsercenterUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set deleted_at=?, username=? where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, time.Now(), fmt.Sprintf("delete_%s_%d", data.Username, data.Id),  id)
	}, usercenterUsersIdKey, usercenterUsersUsernameKey)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	usercenterUsersIdKey := fmt.Sprintf("%s%v", cacheUsercenterUsersIdPrefix, id)
	var resp Users
	err := m.QueryRowCtx(ctx, &resp, usercenterUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and deleted_at is null limit 1", usersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUsername(ctx context.Context, username string) (*Users, error) {
	usercenterUsersUsernameKey := fmt.Sprintf("%s%v", cacheUsercenterUsersUsernamePrefix, username)
	var resp Users
	// m.QueryRowIndexCtx use cached sqlconn
	// 这里缓存只会缓存对应的实体id
	err := m.QueryRowIndexCtx(ctx, &resp, usercenterUsersUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? and deleted_at is null limit 1",usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByPhone(ctx context.Context, phone string) (*Users, error) {
	var resp Users
	query := fmt.Sprintf("select %s from %s where phone = ? and deleted_at is null limit 1", usersRows, m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByEmail(ctx context.Context, email string) (*Users, error) {
	var resp Users
	query := fmt.Sprintf("select %s from %s where email = ? and deleted_at is null limit 1", usersRows, m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	usercenterUsersIdKey := fmt.Sprintf("%s%d", cacheUsercenterUsersIdPrefix, data.Id)
	usercenterUsersUsernameKey := fmt.Sprintf("%s%v", cacheUsercenterUsersUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Email, data.Phone, data.Status, data.Sex, data.Addr, data.Desc, data.Avatar, time.Now(), time.Now())
	}, usercenterUsersIdKey, usercenterUsersUsernameKey)
	return ret, err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	// TODO:make sure if the nil value will be updated
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	usercenterUsersIdKey := fmt.Sprintf("%s%v", cacheUsercenterUsersIdPrefix, data.Id)
	usercenterUsersUsernameKey := fmt.Sprintf("%s%v", cacheUsercenterUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set username=?, password=?, email=?, phone=?, status=?, sex=?, addr=?, `desc`=?, avatar=?, updated_at=? where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Email, newData.Phone, newData.Status, newData.Sex, newData.Addr, newData.Desc, newData.Avatar, time.Now(), newData.Id)
	}, usercenterUsersIdKey, usercenterUsersUsernameKey)
	return err
}

func (m *defaultUsersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUsercenterUsersIdPrefix, primary)
}

func (m *defaultUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and deleted_at is null limit 1", usersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}

func (m *defaultUsersModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}