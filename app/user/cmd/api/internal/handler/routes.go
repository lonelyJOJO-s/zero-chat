// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"
	"time"

	friend "zero-chat/app/user/cmd/api/internal/handler/friend"
	group "zero-chat/app/user/cmd/api/internal/handler/group"
	user "zero-chat/app/user/cmd/api/internal/handler/user"
	"zero-chat/app/user/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodDelete,
				Path:    "/user/friend/:id",
				Handler: friend.FriendDelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/friend/:id",
				Handler: friend.FriendAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/friend/search",
				Handler: friend.SearchHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/friends",
				Handler: friend.FriendListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/usercenter/api/v1"),
		rest.WithTimeout(3000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/group/:id",
				Handler: group.GroupInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/group/:id",
				Handler: group.DismissGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/group/create",
				Handler: group.CreateGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/group/join/:id",
				Handler: group.JoinGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/group/quit/",
				Handler: group.QuitGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/group/update",
				Handler: group.UpdateGroupHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/usercenter/api/v1"),
		rest.WithTimeout(3000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/email/send",
				Handler: user.SendEmailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login/email",
				Handler: user.LogWithEmailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login/username",
				Handler: user.LoginWithUsernameHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/usercenter/api/v1"),
		rest.WithTimeout(3000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/avatar",
				Handler: user.AvatarHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/delete",
				Handler: user.DeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/detail",
				Handler: user.DetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/loginOut",
				Handler: user.LoginOutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update",
				Handler: user.UpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/usercenter/api/v1"),
		rest.WithTimeout(3000*time.Millisecond),
	)
}
