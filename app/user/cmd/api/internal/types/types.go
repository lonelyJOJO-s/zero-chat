// Code generated by goctl. DO NOT EDIT.
package types

type EmailLoginReq struct {
	Email   string `json:"email" validate:"required,email"`
	Captcha string `json:"captcha"`
}

type EmailSendReq struct {
	Email string `json:"email" validate:"required,email"`
}

type FriendIdReq struct {
	Id int64 `path:"id"`
}

type FriendSearchReq struct {
	Keyword string `path:"keyword"`
}

type FriendSearchResp struct {
	Users []User `json:"users"`
}

type FriendsResp struct {
	Users []User `json:"users"`
}

type GetAllGroupsResp struct {
	Groups []GroupWithId `json:"groups"`
}

type GetAllResp struct {
	Users []User `json:"users"`
}

type GetMembersReq struct {
	Id int64 `query:"id"`
}

type GetMembersResp struct {
	Users []UserBasic `json:"users"`
}

type Group struct {
	Name      string `json:"name"`
	Desc      string `json:"desc"`
	Avatar    string `json:"avatar"`
	CreatorId int64  `json:"creator_id"`
}

type GroupCreateReq struct {
	Name string `form:"name"`
	Desc string `form:"desc"`
}

type GroupId struct {
	Id int64 `json:"id"`
}

type GroupQuitReq struct {
	GroupId int64 `json:"group_id"`
	HeirId  int64 `json:"heir_id"`
}

type GroupResp struct {
	Group GroupWithId `json:"group"`
}

type GroupUpdateReq struct {
	Group GroupWithId `json:"group"`
}

type GroupWithId struct {
	Group
	Id int64 `json:"id"`
}

type IdReq struct {
	Id int64 `json:"id"`
}

type JoinGroupReq struct {
	Id int64 `path:"id"`
}

type LoginResp struct {
	Id           int64  `json:"id"`
	AccessToken  string `json:"accessToken"`
	AccessExpire int64  `json:"accessExpire"`
	RefreshAfter int64  `json:"refreshAfter"`
}

type Null struct {
}

type RegisterReq struct {
	Phone           string `json:"phone" validate:"len=11"`
	Email           string `json:"email" validate:"required,email"`
	Username        string `json:"username" validate:"required,min=2,max=20"`
	Password        string `json:"password" validate:"required,min=6,max=20"`
	ConfirmPassword string `json:"confirm_password" validate:"required,eqfield=Password"`
	Sex             int8   `json:"sex" validate:"oneof=0 1"`
}

type RegisterResp struct {
	Id           int64  `json:"id"`
	AccessToken  string `json:"accessToken"`
	AccessExpire int64  `json:"accessExpire"`
	RefreshAfter int64  `json:"refreshAfter"`
}

type SearchAllGroupReq struct {
	Keyword string `query:"keyword"`
}

type SearchAllGroupResp struct {
	Groups []GroupWithId `json:"groups"`
}

type SearchJoinedGroupReq struct {
	Keyword string `query:"keyword"`
}

type SearchJoinedGroupResp struct {
	Groups []GroupWithId `json:"groups"`
}

type SearchUsersReq struct {
	Keyword string `json:"path"`
}

type SearchUsersResp struct {
	Users []User `json:"users"`
}

type User struct {
	Id       int64  `json:"id" validate:"required"`
	Phone    string `json:"phone" validate:"len=11"`
	Username string `json:"username" validate:"required,min=2,max=20"`
	Sex      int64  `json:"sex" validate:"oneof=0 1"`
	Avatar   string `json:"avatar"`
	Status   int    `json:"status"`
	Desc     string `json:"desc"`
	Email    string `json:"email"`
}

type UserBasic struct {
	Id       int64  `json:"id" validate:"required"`
	Username string `json:"username,optional" validate:"omitempty,min=2,max=20"`
	Sex      int64  `json:"sex,optional" validate:"omitempty,oneof=0 1"`
	Avatar   string `json:"avatar,optional" validate:"omitempty"`
	Status   int    `json:"status,optional" validate:"omitempty"`
	Desc     string `json:"desc,optional" validate:"omitempty"`
}

type UserInfoReq struct {
	Id int64 `path:"id"`
}

type UserInfoResp struct {
	UserInfo User `json:"user_info"`
}

type UserUpdateReq struct {
	UserBasic
}

type UserUpdateResp struct {
	UserBasic
}

type UsernameLoginReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
}
