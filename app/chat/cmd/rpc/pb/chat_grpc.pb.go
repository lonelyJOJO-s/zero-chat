// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TableService_StoreAddItem_FullMethodName         = "/pb.TableService/StoreAddItem"
	TableService_GetStoreItemsBySlice_FullMethodName = "/pb.TableService/GetStoreItemsBySlice"
	TableService_SyncAddItem_FullMethodName          = "/pb.TableService/SyncAddItem"
	TableService_SyncGetUnreadItems_FullMethodName   = "/pb.TableService/SyncGetUnreadItems"
)

// TableServiceClient is the client API for TableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableServiceClient interface {
	// store table
	StoreAddItem(ctx context.Context, in *StoreAddItemReq, opts ...grpc.CallOption) (*StoreAddItemResp, error)
	GetStoreItemsBySlice(ctx context.Context, in *GetStoreItemsBySliceReq, opts ...grpc.CallOption) (*GetStoreItemsBySliceResp, error)
	// sync table
	SyncAddItem(ctx context.Context, in *SyncAddItemReq, opts ...grpc.CallOption) (*SyncAddItemResp, error)
	SyncGetUnreadItems(ctx context.Context, in *SyncGetUnreadItemsReq, opts ...grpc.CallOption) (*SyncGetUnreadItemsResp, error)
}

type tableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTableServiceClient(cc grpc.ClientConnInterface) TableServiceClient {
	return &tableServiceClient{cc}
}

func (c *tableServiceClient) StoreAddItem(ctx context.Context, in *StoreAddItemReq, opts ...grpc.CallOption) (*StoreAddItemResp, error) {
	out := new(StoreAddItemResp)
	err := c.cc.Invoke(ctx, TableService_StoreAddItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) GetStoreItemsBySlice(ctx context.Context, in *GetStoreItemsBySliceReq, opts ...grpc.CallOption) (*GetStoreItemsBySliceResp, error) {
	out := new(GetStoreItemsBySliceResp)
	err := c.cc.Invoke(ctx, TableService_GetStoreItemsBySlice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) SyncAddItem(ctx context.Context, in *SyncAddItemReq, opts ...grpc.CallOption) (*SyncAddItemResp, error) {
	out := new(SyncAddItemResp)
	err := c.cc.Invoke(ctx, TableService_SyncAddItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) SyncGetUnreadItems(ctx context.Context, in *SyncGetUnreadItemsReq, opts ...grpc.CallOption) (*SyncGetUnreadItemsResp, error) {
	out := new(SyncGetUnreadItemsResp)
	err := c.cc.Invoke(ctx, TableService_SyncGetUnreadItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServiceServer is the server API for TableService service.
// All implementations must embed UnimplementedTableServiceServer
// for forward compatibility
type TableServiceServer interface {
	// store table
	StoreAddItem(context.Context, *StoreAddItemReq) (*StoreAddItemResp, error)
	GetStoreItemsBySlice(context.Context, *GetStoreItemsBySliceReq) (*GetStoreItemsBySliceResp, error)
	// sync table
	SyncAddItem(context.Context, *SyncAddItemReq) (*SyncAddItemResp, error)
	SyncGetUnreadItems(context.Context, *SyncGetUnreadItemsReq) (*SyncGetUnreadItemsResp, error)
	mustEmbedUnimplementedTableServiceServer()
}

// UnimplementedTableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTableServiceServer struct {
}

func (UnimplementedTableServiceServer) StoreAddItem(context.Context, *StoreAddItemReq) (*StoreAddItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAddItem not implemented")
}
func (UnimplementedTableServiceServer) GetStoreItemsBySlice(context.Context, *GetStoreItemsBySliceReq) (*GetStoreItemsBySliceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreItemsBySlice not implemented")
}
func (UnimplementedTableServiceServer) SyncAddItem(context.Context, *SyncAddItemReq) (*SyncAddItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAddItem not implemented")
}
func (UnimplementedTableServiceServer) SyncGetUnreadItems(context.Context, *SyncGetUnreadItemsReq) (*SyncGetUnreadItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGetUnreadItems not implemented")
}
func (UnimplementedTableServiceServer) mustEmbedUnimplementedTableServiceServer() {}

// UnsafeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServiceServer will
// result in compilation errors.
type UnsafeTableServiceServer interface {
	mustEmbedUnimplementedTableServiceServer()
}

func RegisterTableServiceServer(s grpc.ServiceRegistrar, srv TableServiceServer) {
	s.RegisterService(&TableService_ServiceDesc, srv)
}

func _TableService_StoreAddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAddItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).StoreAddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_StoreAddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).StoreAddItem(ctx, req.(*StoreAddItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_GetStoreItemsBySlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreItemsBySliceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).GetStoreItemsBySlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_GetStoreItemsBySlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).GetStoreItemsBySlice(ctx, req.(*GetStoreItemsBySliceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_SyncAddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAddItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).SyncAddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_SyncAddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).SyncAddItem(ctx, req.(*SyncAddItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_SyncGetUnreadItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncGetUnreadItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).SyncGetUnreadItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_SyncGetUnreadItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).SyncGetUnreadItems(ctx, req.(*SyncGetUnreadItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TableService_ServiceDesc is the grpc.ServiceDesc for TableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TableService",
	HandlerType: (*TableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreAddItem",
			Handler:    _TableService_StoreAddItem_Handler,
		},
		{
			MethodName: "GetStoreItemsBySlice",
			Handler:    _TableService_GetStoreItemsBySlice_Handler,
		},
		{
			MethodName: "SyncAddItem",
			Handler:    _TableService_SyncAddItem_Handler,
		},
		{
			MethodName: "SyncGetUnreadItems",
			Handler:    _TableService_SyncGetUnreadItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
